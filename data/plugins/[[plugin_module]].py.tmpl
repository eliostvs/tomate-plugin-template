import logging

import gi

from wiring import Graph

import tomate.pomodoro.plugin as plugin
from tomate.pomodoro import Events, on, Bus, suppress_errors

logger = logging.getLogger(__name__)


class [[ plugin_class ]](plugin.Plugin):
    @suppress_errors
    def __init__(self):
        super().__init__()
        self.my_variable = None  # initialize instance

    def configure(self, bus: Bus, graph: Graph) -> None:
        super().configure(bus, graph)
        self.my_variables = graph.get("spec")  # get objects registered in the graph

    @suppress_errors
    def activate(self):
        super().activate()
        # add logic when the plugin is activated

    @suppress_errors
    def deactivate(self):
        super().deactivate()
        # add logic when the plugin is deactivated

    @suppress_errors
    @on(Events.SESSION_START)
    def on_session_start(self, *_, **__):
        logger.debug("action=session_start")  # listen for events
